name: Deploy to VPS
on:
  push: 
    branches: [ main, staging ] # if you want to change main branch, set the your branch name in 3rd action condintion rule
  workflow_dispatch:
    inputs:
      target:
        description: 'Target'
        required: true
        default: ''
        type: choice
        options:
          - 'staging'
          - 'production'
env:
  project: "aida" # Update with your project name
  target: ${{ github.event.inputs.target  }}
jobs:
  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    
    steps:
        - name: Checkout
          uses: actions/checkout@v3
        
        - name: Setting target from Input
          if: ${{ github.event.inputs.target != '' }}
          run: echo "target=${{ github.event.inputs.target }}" >> $GITHUB_ENV
  
        - name: Setting target based on branch
          if: ${{ github.event.inputs.target == '' }}
          run: |
            if [[ $GITHUB_REF == 'refs/heads/main' ]]; then
              echo "target=production" >> $GITHUB_ENV
            else
              echo "target=staging" >> $GITHUB_ENV
            fi
        
        - name: Generate passwords
          uses: timheuer/base64-to-file@v1.2
          with:
            fileName: 'passwords.yaml'
            fileDir: './${{ env.project }}_server/config/'
            encodedString: ${{ secrets.SERVER_PASSWORDS }}
        
        - name: Read passwords
          id: read_passwords
          uses: teunmooij/yaml@v1
          with:
            from-file: './${{ env.project }}_server/config/passwords.yaml'

        - name: Read ${{env.target}} configuration
          id: read_config
          uses: teunmooij/yaml@v1
          with:
            from-file: './${{ env.project }}_server/config/${{ env.target }}.yaml'
        
        - name: Create .env configuration file
          run: |
            
            echo "TARGET=${{env.target}}" >> ./${{env.project}}_server/.env
            if [[ ${{env.target}} == 'production' ]]; then
              echo "DATABASE_PASSWORD=${{ steps.read_passwords.outputs.data.production.database }}" >> ./${{env.project}}_server/.env
            else 
              echo "DATABASE_PASSWORD=${{ steps.read_passwords.outputs.data.staging.database }}" >> ./${{env.project}}_server/.env
            fi

            echo "DATABASE_HOST=${{ steps.read_config.outputs.data.database.host }}" >> ./${{env.project}}_server/.env
            echo "DATABASE_PORT=${{ steps.read_config.outputs.data.database.port }}" >> ./${{env.project}}_server/.env
            echo "DATABASE_NAME=${{ steps.read_config.outputs.data.database.name }}" >> ./${{env.project}}_server/.env
            echo "DATABASE_USER=${{ steps.read_config.outputs.data.database.user }}" >> ./${{env.project}}_server/.env
            
            echo "API_SERVER_PUBLIC_HOST=${{ steps.read_config.outputs.data.apiServer.publicHost }}" >> ./${{env.project}}_server/.env
            echo "API_SERVER_PUBLIC_PORT=${{ steps.read_config.outputs.data.apiServer.publicPort }}" >> ./${{env.project}}_server/.env

            echo "INSIGHTS_SERVER_PUBLIC_HOST=${{ steps.read_config.outputs.data.insightsServer.publicHost }}" >> ./${{env.project}}_server/.env
            echo "INSIGHTS_SERVER_PUBLIC_PORT=${{ steps.read_config.outputs.data.insightsServer.publicPort }}" >> ./${{env.project}}_server/.env

            echo "WEB_SERVER_PUBLIC_HOST=${{ steps.read_config.outputs.data.webServer.publicHost }}" >> ./${{env.project}}_server/.env
            echo "WEB_SERVER_PUBLIC_PORT=${{ steps.read_config.outputs.data.webServer.publicPort }}" >> ./${{env.project}}_server/.env
        
        - name: create zip file 
          uses: montudor/action-zip@v1
          with:
            args: zip -qq -r ${{env.project}}_server.zip ${{env.project}}_server
          
        - name: Send Docker images to VPS
          uses: appleboy/scp-action@master
          with:
            host: ${{ secrets.VPS_HOST }}
            username: ${{ secrets.VPS_USERNAME }}
            password: ${{ secrets.VPS_PASSWORD }}
            source: "${{env.project}}_server.zip"
            target: "/home/${{ secrets.VPS_USERNAME }}/"
    
        - name: Load and Restart Docker containers on VPS
          uses: appleboy/ssh-action@master
          with:
            host: ${{ secrets.VPS_HOST }}
            username: ${{ secrets.VPS_USERNAME }}
            password: ${{ secrets.VPS_PASSWORD }}
            script: |
              cd /home/${{ secrets.VPS_USERNAME }}/
              unzip ${{env.project}}_server.zip -d ${{env.project}}_server
              rm ${{env.project}}_server.zip
              cd ${{env.project}}_server
              docker compose --build --detach
              